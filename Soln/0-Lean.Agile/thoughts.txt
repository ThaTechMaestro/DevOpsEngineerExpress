Goal: Understand Everything about Agile and explain in Simple terms

It was created to solve a particular problem, know the problem 
then understanding Agile becomes easier

Agile came as an improvement on Waterfall
Waterfall is a sequential Software development model
Waterfall has the following phases
- Requirements Gathering
- Software Design
- Implementation
- Verfication
- Deployment
- Maintenance

Waterfall was best suited for projects that are small in size
The Requirements for these projects can be determined upfront
Waterfal -> Monolith projects
Monliths were great for requirements that do not frequently change

Problems with Waterfall & Monolith
As the year progressed into the early 2000s
The requirements made by clients kept changing frequently

Being a Monolith we deploy only one thing
We test thoroughly
Ask for a downtime
Then push changes into production and incase
    where there are breakages we fix during the downtime
    This is great if we had to make changes once a Month 

    Clients started requesting changes a lot, at which deploying
    these changes were not possible since it might cause multiple
    downtime in production an affect lots of businesses

    THe core question is?
    How can we push changes requested by clients frequently
    into production without causing any to little downtime
    As time progresses requirements were constantly changing 
    and required very fast implementation else you'll lose out

    People started brainstorming on better Software

    Problem 1
    Methodologies to meet the current needs of the clients(constantly changing requirements) without affecting
    how the software is written in the first place.

    Problem2
    Time taken to push changes into production and ensure 
    everything is working fine(takes weeks or months in the late 1900s)


This brought Agile
It is a philosophy to rapiddly deploy applications in a much more
organised way
You want to make sure you can easily deploy changes to your codebase
to production with less downtime and in a structured way

Why can't Waterfall work in today's world
Because the software will not meet up to the desired requirements of
the clients in time before a new sets of Requirements are given.

Also multiple downtimes can lead to big losses and hence losing
customers or clients as software becomes more reliable, clients
become very impatient even at the slightest error.


What is Agile
Value delivered in small increments
It's easy to make changes since we go one service at a time
Things are done in short cycles
Implement a set of features, do a demo to your clients
- collect feedbacks, work with that and make 
    necessary changes on the next cycle.
Basically an easier way to adapt to changes by building 
    application in sprints a couple of features at a time.


How to implement agile?
=======================================
SCRUM
You have a
- Product owner
- Scrum Master
- Team(Everyone in developing the software)

A backlog is a collection of user stories

User stories are generated by Product owner and Scrum Master
Project is broken into user stories by Product Owner and Scrum Master
The user stories are priorities and developed via  by Scrum Master
Each Team is being assigned what to work on by SCRUM master 

Every sprint consist of the following phases
- Plan
- Build 
- Test 
- Review

Example:
Building E-commerece

User stories
Payment Processing
Front End
Email features

Prioritised and development of timeline
1. Front End (5weeks)
2. Email features (3weeks)
3. Payment Processing (2weeks)

Sprint1 (Front End) + Review
Sprint2 (Email Features) + Review
Sprint3 (Payment Processing) + Review

Sprint Planning: Explanation of the desired end goal for the project

Daily Scrum: Daily meetings involving discussion about issues, problems and current goals
             among developers, testers and scrum masters.

Sprint Review: A Demo of the developed code which can be shipped.

Core idea:
Breaking the project down into smaller set of tasks 
    everyone knows exactly what they are meant to do
    and you have production ready code after short intervals
    (2weeks)

    Also you can get instant feedback from the new changes implemented
    either to make further changes or move on to the next task.

    Compared to Waterfal where you had to wait for longer duration
    of time to get feedbacks.

============================================
- eXtreme Programming(XP)



============================================
- Lean

Cross functionality
Breaking Silos
=============================================
- KANBAN

Every completed task is replaced immediately
and waiting time is eliminated

============================================
- Crystal

Philosophical
Technical
Software Development

(Occuring in parallel)

